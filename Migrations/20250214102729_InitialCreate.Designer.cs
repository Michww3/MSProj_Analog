// <auto-generated />
using System;
using MSProj_Analog.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MSProj_Analog.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250214102729_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MSProj_Analog.DTOs.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NextTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreviousTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NextTaskId")
                        .IsUnique()
                        .HasFilter("[NextTaskId] IS NOT NULL");

                    b.HasIndex("PreviousTaskId")
                        .IsUnique()
                        .HasFilter("[PreviousTaskId] IS NOT NULL");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MSProj_Analog.DTOs.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointedTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OvertimeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StandardRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointedTaskId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("MSProj_Analog.DTOs.ProjectTask", b =>
                {
                    b.HasOne("MSProj_Analog.DTOs.ProjectTask", "NextTask")
                        .WithOne()
                        .HasForeignKey("MSProj_Analog.DTOs.ProjectTask", "NextTaskId");

                    b.HasOne("MSProj_Analog.DTOs.ProjectTask", "PreviousTask")
                        .WithOne()
                        .HasForeignKey("MSProj_Analog.DTOs.ProjectTask", "PreviousTaskId");

                    b.Navigation("NextTask");

                    b.Navigation("PreviousTask");
                });

            modelBuilder.Entity("MSProj_Analog.DTOs.Resource", b =>
                {
                    b.HasOne("MSProj_Analog.DTOs.ProjectTask", "AppointedTask")
                        .WithMany("AssignedResource")
                        .HasForeignKey("AppointedTaskId");

                    b.Navigation("AppointedTask");
                });

            modelBuilder.Entity("MSProj_Analog.DTOs.ProjectTask", b =>
                {
                    b.Navigation("AssignedResource");
                });
#pragma warning restore 612, 618
        }
    }
}
